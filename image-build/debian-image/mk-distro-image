#!/bin/bash

ME=$0
ME_FULL=$(readlink -f $0)
MY_NAME=$(basename $0)
MY_DIR=$(dirname $ME_FULL)
BASE_DIR=$(cd $MY_DIR/../..; pwd)
MY_SUBDIR=${MY_DIR#$BASE_DIR/}

ARCH=arm64
DISTRO=debian:12
BUILD_DIR=$MY_SUBDIR/generated
IMAGE_SUB_DIR=debian-12-arm64
IMAGES=$BASE_DIR/images/$IMAGE_SUB_DIR
SAVED_IMAGES=$BASE_DIR/saved-images/$IMAGE_SUB_DIR

dbg_vars() {
    echo "ME=$ME"
    echo "MY_NAME=$MY_NAME"
    echo "MY_DIR=$MY_DIR"
    echo "BASE_DIR=$BASE_DIR"
    echo "MY_SUBDIR=$MY_SUBDIR"
    echo "BUILD_DIR=$BUILD_DIR"
    echo "IMAGE_SUB_DIR=$IMAGE_SUB_DIR"
    echo "IMAGES=$IMAGES"
    echo "SAVED_IMAGES=$SAVED_IMAGES"
}
#dbg_vars

XEN_DEB=xen/xen-upstream-4.19-unstable.deb

apt1() {
    # we are in a subshell so this wont out live this function
    export DEBIAN_FRONTEND=noninteractive

    apt update
    apt install -y initramfs-tools

    # don't let the host system effect the initramfs resume var
    echo "RESUME=none" >/etc/initramfs-tools/conf.d/resume

    apt install -y --no-install-recommends \
        linux-image-$ARCH \
        grub-efi \
        systemd systemd-sysv udev  \
        iproute2 iputils-ping net-tools ifupdown isc-dhcp-client \
        fdisk pciutils openssh-server openssh-client \
        sudo procps nano xterm at \
        manpages man bash-completion less wget readline-common

    # Don't install debian xen, but this is how
    # apt install -y --no-install-recommends xen-system-$ARCH

    systemctl enable systemd-networkd

    # now remove the hack
    rm /etc/initramfs-tools/conf.d/resume
}

setup_users() {
    passwd -d root
}

add_xen() {
    # instal the package from images
    apt install ./images/$XEN_DEB

    # give /usr/local/lib higher priority than /lib/aarch64-linux-gnu
    LD_CONF=/etc/ld.so.conf.d
    L1=libc.conf
    L2=aarch64-linux-gnu.conf
    mv $LD_CONF/$L1 $LD_CONF/20-$L1
    mv $LD_CONF/$L1 $LD_CONF/50-$L1
    ldconfig

    # install needed libs
    apt install -y libyajl2 libfdt1
    systemctl enable xencommons

    SLINK=$(readlink /boot/xen)
    ln -s boot/$SLINK /xen

    # delete the un-versioned symlink in /boot as debian initramfs-tools does
    # not like it
    rm /boot/xen
}

trim_modules() {
    for k in /lib/modules/*; do
        for d in media gpu infiband usb iio net/wireless net/usb; do
            rm -rf $k/kernel/drivers/$d
        done

        find $k/kernel/drivers/net/ethernet -name "*.ko" \
            ! -name "e100*.ko" \
            ! -name "virt*" \
            ! -name "xen*" \
            | xargs rm
    done
}

in_container() {
    OWNER=$1
    cd /build

    # install the packages
    (apt1)
    setup_users

    (add_xen)
    (trim_modules)
    apt clean

    # copy in the extra stuff
    rm -rf /tmp/$BUILD_DIR
    mkdir -p /tmp/$BUILD_DIR/
    cp -a $MY_SUBDIR/my-extra-stuff /tmp/$BUILD_DIR
    chown -R 0:0 /tmp/$BUILD_DIR
    (cd /tmp/$BUILD_DIR/my-extra-stuff; cp -a * /)
    rm -rf /tmp/$BUILD_DIR

    # leave a copy of myself
    cp $0 /post_process

    # make the rootfs tar file
    mkdir -p $BUILD_DIR
    echo "make rootfs.tar.gz"
    tar --one-file-system -czf $BUILD_DIR/rootfs.tar.gz \
        --exclude /build --exclude .dockerenv /

    # keep a copy of the boot dir, for qemu direct boot
    mkdir -p $IMAGES/boot
    cp -a /boot $IMAGES/boot/
    cp -d /vmlinuz /initrd.img $IMAGES/boot/
    cp -d /xen* $IMAGES/boot/

    # give the contents back to the user
    chown -R $OWNER $BUILD_DIR
    chown -R $OWNER $IMAGES

    # now measure the rootfs expanded size
    mkdir -p /tmp/$BUILD_DIR/
    tar -C /tmp/$BUILD_DIR -xzf /build/$BUILD_DIR/rootfs.tar.gz
    SIZE_MB=$(du -s -BM /tmp/$BUILD_DIR | awk '{ print substr($1,1,length($1)-1) }')
    echo "Disk size $SIZE_MB"
}

# docker should have a pull --as option but it does not
# leaving foreign container images in normal name space causes issues
# so we do this
foreign_pull() {
    OLD_ID=$(docker image list --format json $DISTRO | jq -r '.ID')
    docker pull --platform $ARCH $DISTRO
    NEW_ID=$(docker image list --format json $DISTRO | jq -r '.ID')
    docker tag $NEW_ID $ARCH/$DISTRO
    if [ x"$OLD_ID" == x"" ]; then
        docker rmi $DISTRO
    else
        docker tag $OLD_ID $DISTRO
    fi
}

do_rootfs() {
    if ! docker images >/dev/null; then
        error "docker is not installed or you do not have access!"
    fi

    # make sure we are in the project root
    cd $BASE_DIR

    # get any image assets we need
    ./scripts/maybe-fetch $XEN_DEB

    # save any existing version before we trash them
    if [ -d $BUILD_DIR ]; then
        mkdir -p $(dirname old/${BUILD_DIR})
        mv $BUILD_DIR old/${BUILD_DIR}_$(date +%Y-%m-%d-%H-%M-%S)
    fi
    if [ -d $IMAGES ]; then
        mkdir -p $(dirname old/${IMAGES})
        mv $IMAGES old/${IMAGES}_$(date +%Y-%m-%d-%H-%M-%S)
    fi

    # get a fresh copy of debian-12 for arm64 as arm64/debian:12
    foreign_pull

    docker run -it --rm --platform $ARCH -v$BASE_DIR:/build $ARCH/$DISTRO \
        /build/$MY_SUBDIR/$MY_NAME in_container "$UID:$(id -g)"
}

# The rootfs.tar.gz file exists, now make a whole disk image
# the efi partition will be blank
do_disk_img() {
    # make sure we are in the project root
    make-image-targets $MY_DIR
}

# The full image exists now, install grub in the efi partition
in_qemu_make_efi() {
    mount /dev/vda2 / -o remount,rw
    mkdir /boot/efi
    mount /dev/vda1 /boot/efi
    grub-install --force-extra-removable /dev/vda1
    update-grub
}

# we are in qemu in a fresh boot
# the initrd.img has alreadly mounted proc & sysfs
# and the rootfs is mounted rw
qemu_fresh_boot_post_process() {
    echo "Post process disk image:"
    echo "/post_process $@"
    in_qemu_make_efi "$@"
    sync; sync
    mount / -o remount,ro
    poweroff -f
}

# on host and we want to run post-processing
# start qemu with the kernel & initrd already setup
# and tell it to run the copy of ourselves we already put in the root
do_make_efi() {
    KERNEL_CMDLINE_EXTRA="init=/post_process rw" $BASE_DIR/scripts/qemu-run linux
}

# on host and we want to run post-processing
# start qemu with the kernel & initrd already setup
# and tell it to run the copy of ourselves we already put in the root
do_img_dbg() {
    echo 'use "poweroff -f" inside machine to exit, or just use ^A x'
    echo 'remember that the disk image is live, so sync after changes'
    echo 'starting image in 2 seconds'
    sleep 2
    KERNEL_CMDLINE_EXTRA="init=/bin/bash rw" $BASE_DIR/scripts/qemu-run linux
}

do_save() {
    echo "compress $IMAGE_SUB_DIR/hd.img"
    bzip2 -zkc $IMAGES/hd.img >$SAVED_IMAGES/hd.img.bz2
    echo "archive $IMAGE_SUB_DIR/boot dir"
    tar czf $SAVED_IMAGES/boot.tar.gz -C $IMAGES boot
}

do_all() {
    do_rootfs "$@"
    do_disk_img "$@"
    do_make_efi "$@"
    do_save "$@"
}

help() {
    echo "$ME <step>"
    echo "where step is one of"
    echo "  rootfs          make rootfs.tar.gz and direct boot directory"
    echo "  disk_img        make hd.img from rootfs w/ blank efi"
    echo "  make_efi        in hd.img, populate efi partition for bootloaders"
    #echo "  post_efi        boot hd.img via bootloader and save env vars"
    echo "  save            save the results in saved-images (won't commit)"
    echo "  all             all the above"
    echo "  img_dbg         hd.img debug (before it can boot)"
}

main() {
    case $1 in
    "")
        echo "specify what step"
        help
        ;;
    in_container*)
        CMD=$1; shift
        $CMD "$@"
        ;;
    help)
        help
        ;;
    *)
        CMD=$1; shift
        do_$CMD "$@"
        ;;
    esac
}

case $ME in
/post_process)
    qemu_fresh_boot_post_process
    ;;
*)
    main $@
    ;;
esac
