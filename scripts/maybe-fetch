#!/bin/bash

ME=$0
MY_DIR=$(dirname $ME)
BASE_DIR=$(dirname $MY_DIR)

# short cut names for some common things
# S = saved images (aka templates)
# U = in use images
U=$BASE_DIR/images
S=$BASE_DIR/saved-images
MARKER=debian-12-arm64/boot.tar.gz

check_saved_images_submodule() {
    # make sure we have git lfs
    if ! git lfs status >/dev/null; then
        echo "You need to install git lfs"
        echo "Something like: sudo apt install git-lfs"
        exit 2
    fi

    # see if we already have the images
    if ! test -r $S/$MARKER; then
        # no, init the submodule
        echo "Init the saved-images submodule"
        git submodule init saved-images
        GIT_LFS_SKIP_SMUDGE=1 git submodule update saved-images
    fi

    # now if we explicitly want all the files do that now
    if [ x"$1" = x"all" ]; then
        echo "Pulling all LFS files, this may take a while"
        (cd $S; git lfs pull)
    fi
}

# see if we have the image file
check_image() {
    if ! test -r $S/$1; then
        # no, maybe we need to fetch the submodule
        check_saved_images_submodule
        if ! test -r $S/$1; then
            # we still don't have it, probably a typo
            echo "File $S/$1 does not exist"
            exit 2
        fi
    fi
    # make sure we have the real lfs file, not just the reference
    (cd $S; git lfs pull --include $1)
}

do_one_file() {
    DIR=$U/$(dirname $1)
    FILE=$(basename $1)
    SP="                 "

    case $1 in
    */asis.*)
        # copy as is but strip the asis. marker
        TARGET=$DIR/${FILE#asis.}
        if ! test -r $TARGET; then
            check_image $1
            echo "copy $1 $SP"
            mkdir -p $DIR
            cp $S/$1 $TARGET
        fi
        ;;
    *.tar.gz)
        # The target is a directory for this case
        TARGET=$U/${1%.tar.gz}
        if ! test -d $TARGET; then
            check_image $1
            echo "extract $1 $SP"
            mkdir -p $DIR
            tar xzf $S/$1 -C $DIR
        fi
        ;;
    *.cpio.gz)
        # keep compressed, just copy
        TARGET=$U/$1
        if ! test -r $TARGET; then
            check_image $1
            echo "copy $1 $SP"
            mkdir -p $DIR
            cp $S/$1 $TARGET
        fi
        ;;
    *.bz2)
        # decompress
        TARGET=$U/${1%.bz2}
        if ! test -r $TARGET; then
            check_image $1
            echo "decompress $1 $SP"
            mkdir -p $DIR
            bzcat $S/$1 >$TARGET
        fi
        ;;
    *.gz)
        # decompress
        TARGET=$U/${1%.gz}
        if ! test -r $TARGET; then
            check_image $1
            echo "decompress $1 $SP"
            mkdir -p $DIR
            zcat $S/$1 >$TARGET
        fi
        ;;
    *)
        # everything else is just a copy
        TARGET=$U/$1
        if ! test -r $TARGET; then
            check_image $1
            echo "copy $1 $SP"
            mkdir -p $DIR
            cp $S/$1 $U/$1
        fi
        ;;
    esac
}

# we have the target, try to guess the template
find_template() {
    DIR=$(dirname $1)
    FILE=$(basename $1)
    SP="                 "

    for check in just_copy asis tar.gz cpio.gz bz2 gz; do
        case $check in
        just_copy)
            # copy as is but strip the asis. marker
            TEMPLATE=$DIR/${FILE}
            ;;
        asis)
            # copy as is but strip the asis. marker
            TEMPLATE=$DIR/asis.${FILE}
            ;;
        *)
            TEMPLATE=$DIR/${FILE}.$check
            ;;
        esac

        echo "Check $S/$TEMPLATE"
        if [ -f $S/$TEMPLATE ]; then
            return 0
        fi
    done

    # can't file a template
    return 1
}

# we have one arg that is not all
# it maybe a saved image template (xxx/hd.img.bz2)
# it may be a dir in saved-images (xxx)
# it maybe the desired target (xxx/hd.img)
# it may be a desired target dir (xxx when saved-images has xxx.tar.gz)
do_one_something() {
    if [ -d $S/$1 ]; then
        for f in $(cd $S/$1; find * -type f); do
            do_one_file $1/$f
        done
    elif [ -f $S/$1 ]; then
        do_one_file $1
    else
        if find_template $1; then
            do_one_file $TEMPLATE
        elif [ -e $U/$1 ]; then
            # it does not exist in saved-images but does in images
            return 0
        else
            echo "Can't find $1"
            return 1
        fi
    fi
}

do_all() {
    check_saved_images_submodule all
    for f in $(cd $S; find * -type f); do
        do_one_file $f
    done
}

case $1 in
all)
    do_all
    ;;
*)
    check_saved_images_submodule
    do_one_something $1
    ;;
esac
