#!/bin/bash

# Run QEMU with various options for boot firmware and image

ME=$0
ME_FULL=$(readlink -f $0)
MY_DIR=$(dirname $ME_FULL)
BASE_DIR=$(dirname $MY_DIR)

mkdir -p $BASE_DIR/logs
PID_FILE=$BASE_DIR/logs/qemu.pid

DEF_QEMU_DIR=$BASE_DIR/images/host/$(uname -m)/qemu-9-wip

FETCH=$BASE_DIR/scripts/maybe-fetch

# provide defaults if not overridden by ENV vars
: ${QEMU_DIR:=$DEF_QEMU_DIR}
: ${TMPDIR:=/tmp/qemu-run-$$}
: ${FLASH_CODE_RO:=on}
: ${FLASH_VARS_RO:=on}
: ${QEMU_IMAGE_SET:=debian-12-arm64}
: ${QEMU_HD:=${QEMU_IMAGE_SET}/hd.img}
: ${QEMU_DB:=${QEMU_IMAGE_SET}/boot}

# short cut names for some common things
G=$BASE_DIR/images
HD=$QEMU_HD
DB=$QEMU_DB
DBK=$G/$DB/vmlinuz
DBI=$G/$DB/initrd.img
DBX=$G/$DB/xen

if [ x"$QEMU_DIR" = x"system" ]; then
    export QEMU_BIN=qemu-system-aarch64

    # Find the firmware
    # last one found wins so search from least prefered to most prefered
    for f in AAVMF_CODE.fd QEMU_EFI.fd edk2-aarch64-code.fd; do
        for d in /usr/share/{AAVMF,qemu,qemu-efi-aarch64}; do
            if [ -r $d/$f ]; then
                EDK_FILE=/usr/share/qemu-efi-aarch64/QEMU_EFI.fd
            fi
        done
    done
else
    export QEMU_BIN=$QEMU_DIR/bin/qemu-system-aarch64
    export LD_LIBRARY_PATH=$QEMU_DIR/lib/$(uname -m)-linux-gnu/:$LD_LIBRARY_PATH
    EDK_FILE=$QEMU_DIR/share/qemu/edk2-aarch64-code.fd
fi

if [ x"$TFTPDIR" = x"" ]; then
    if [ -d tftp ]; then
        TFTPDIR=$PWD/tftp
    else
        mkdir -p $TMPDIR/tftp
        TFTPDIR=$TMPDIR/tftp
    fi
else
    mkdir -p $TFTPDIR;
fi

# if we have a TFTP boot script
if [ $TFTPDIR/boot.script ]; then
    # update the u-boot image version if needed
    if [ ! -r $TFTPDIR/boot.scr.uimg -o \
        $TFTPDIR/boot.script -nt $TFTPDIR/boot.scr.uimg ]; then
        mkimage -T script -d $TFTPDIR/boot.script $TFTPDIR/boot.scr.uimg
    fi
fi

QEMU_BASE="-machine type=virt \
           -cpu cortex-a57 \
           -smp 8 \
           -accel tcg \
           -device virtio-net-device,netdev=unet \
           -netdev user,id=unet,hostfwd=tcp::2222-:22,tftp=$TFTPDIR \
           -serial mon:stdio \
           -monitor tcp::2220,server=on,wait=off \
           -gdb tcp::2221,server=on,wait=off \
           -pidfile $PID_FILE \
           -m 8192 \
           -nographic"

# U-boot can't handle virtio-scsi ATM so use virtio-blk (and /dev/vda)
# but for now leave the choice to the specific case
: \
           -device virtio-scsi-pci \
           -device scsi-hd,drive=hd \

qemu-via-docker() {
    docker run -it --rm -v${HOME}:${HOME} \
        -w ${PWD} -u ${UID}:$(id -g) -e HOME=${HOME} \
        registry.gitlab.com/linaro/blueprints/qemu-swtpm \
        /usr/local/bin/qemu-system-aarch64-swtpm "$@"
}

fetch-qemu() {
    case $QEMU_DIR in
    $BASE_DIR/images/*)
        $FETCH ${QEMU_DIR#$BASE_DIR/images/}.tar.gz
    esac
}

case $1 in

"kill")
    if [ -r $PID_FILE ]; then
        kill -3 $(cat $PID_FILE)
    fi
    exit 0
    ;;

"tfa-u-boot"|"tfa-uboot")
    # can't handle gicv3
    U_BOOT=qemu-firmware/arm64-tfa-optee-uboot.bin
    fetch-qemu
    $FETCH ${U_BOOT}.bz2
    $FETCH ${HD}.bz2
    $QEMU_BIN $QEMU_BASE \
        -machine type=virt,virtualization=on,secure=on,gic_version=2 \
        -device virtio-blk-device,drive=hd \
        -blockdev driver=raw,node-name=hd,file.driver=file,file.filename=${G}/${HD} \
        -bios ${G}/$U_BOOT
    ;;

# u-boot at EL2 (no TFA at EL3, no OP-TEE at S-EL1)
"u-boot"|"uboot"|"u-boot-tftp"|"uboot-tftp")
    U_BOOT=qemu-firmware/arm64-u-boot.bin
    case $1 in
    *-tftp)
        U_BOOT_VARS=qemu-firmware/arm64-u-boot-vars-tftp.bin
        ;;
    *)
        U_BOOT_VARS=qemu-firmware/arm64-u-boot-vars-blank.bin
        ;;
    esac
    fetch-qemu
    $FETCH ${U_BOOT}.bz2
    $FETCH ${U_BOOT_VARS}.bz2
    $FETCH ${HD}.bz2
    $QEMU_BIN $QEMU_BASE \
        -machine type=virt,virtualization=on,gic_version=3 \
        -device virtio-blk-device,drive=hd \
        -blockdev driver=raw,node-name=hd,file.driver=file,file.filename=${G}/${HD} \
        -drive if=pflash,unit=0,readonly=${FLASH_CODE_RO},file=${G}/${U_BOOT},format=raw \
        -drive if=pflash,unit=1,readonly=${FLASH_VARS_RO},file=${G}/${U_BOOT_VARS},format=raw
    ;;

"edk2")
    fetch-qemu
    $FETCH ${HD}.bz2
    if [ -z "$EDK_FILE" -o ! -r "$EDK_FILE" ]; then
        echo "EDK_FILE=$EDK_FILE not found"
        exit 2
    fi
    $QEMU_BIN $QEMU_BASE \
        -machine type=virt,virtualization=on,secure=off,gic_version=2 \
        -device virtio-blk-device,drive=hd \
        -blockdev driver=raw,node-name=hd,file.driver=file,file.filename=${G}/${HD} \
        -bios $EDK_FILE
    ;;

"ts")
    # Use trusted-substrate with debian
    # Won't boot as debian default boot file is not signed
    # can't handle gicv3 nor memory > 3072
    FLASH_NAME=trs/flash.bin-qemu
    fetch-qemu
    $FETCH ${HD}.bz2
    $FETCH ${FLASH_NAME}.gz
    $MY_DIR/qemu-system-aarch64-swtpm $QEMU_BASE \
        -machine type=virt,virtualization=on,secure=on,gic_version=2 \
        -drive id=disk1,file=${G}/${HD},if=none,format=raw \
        -device virtio-blk-device,drive=disk1 \
        -drive if=pflash,unit=0,readonly=off,file=${G}/${FLASH_NAME},format=raw \
        -m 3072 \
        -device i6300esb,id=watchdog0
    ;;

"trs")
    # can't handle gicv3 nor memory > 3072
    IMAGE_NAME=trs/trs-image-trs-qemuarm64.rootfs.wic
    FLASH_NAME=trs/flash.bin-qemu
    fetch-qemu
    $FETCH ${IMAGE_NAME}.bz2
    $FETCH ${FLASH_NAME}.gz
    echo "Starting QEMU"
    $MY_DIR/qemu-system-aarch64-swtpm $QEMU_BASE \
        -machine type=virt,virtualization=on,secure=on,gic_version=2 \
        -drive id=disk1,file=${G}/${IMAGE_NAME},if=none,format=raw \
        -device virtio-blk-device,drive=disk1 \
        -drive if=pflash,unit=0,readonly=off,file=${G}/${FLASH_NAME},format=raw \
        -m 3072 \
        -device i6300esb,id=watchdog0
    ;;

"direct"|"linux"|"linux-direct")
    : ${KERNEL_CMDLINE:=console=ttyAMA0 root=/dev/vda2}
    fetch-qemu
    $FETCH ${HD}.bz2
    $FETCH ${DB}.tar.gz
    $QEMU_BIN $QEMU_BASE \
        -machine type=virt,virtualization=on,gic_version=3 \
        -device virtio-blk-device,drive=hd \
        -blockdev driver=raw,node-name=hd,file.driver=file,file.filename=${G}/${HD} \
        -kernel ${DBK} \
        -initrd ${DBI} \
        -append "${KERNEL_CMDLINE} ${KERNEL_CMDLINE_EXTRA}"
    ;;

"xen-direct"|"xen")
    : ${KERNEL_CMDLINE:=console=hvc0 earlyprintk=xen root=/dev/vda2}
    : ${XEN_CMDLINE:=dom0_mem=4G,max:4G dom0_max_vcpus=4 dom0_vcpus_pin=true sched=null loglvl=all guest_loglvl=all}
    fetch-qemu
    $FETCH ${HD}.bz2
    $FETCH ${DB}.tar.gz
    $QEMU_BIN $QEMU_BASE \
        -machine type=virt,virtualization=on,gic_version=3 \
        -device virtio-blk-device,drive=hd \
        -blockdev driver=raw,node-name=hd,file.driver=file,file.filename=${G}/${HD} \
        -kernel ${DBX} \
        -append "${XEN_CMDLINE} ${XEN_CMDLINE_EXTRA}" \
        -device guest-loader,\
addr=0x49000000,kernel=${DBK},\
bootargs="${KERNEL_CMDLINE} ${KERNEL_CMDLINE_EXTRA}" \
        -device guest-loader,\
addr=0x50000000,initrd=${DBI}
    ;;

*)
    echo "unknown option $1"
    exit 0
    ;;

esac

if [ $? -gt 100 ]; then
    sleep 2
    reset
    echo "terminal reset due to error exit"
fi
